<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kitias.Providers</name>
    </assembly>
    <members>
        <member name="T:Kitias.Providers.ExceptionModel">
            <summary>
            Model to view for user
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.StatusCode">
            <summary>
            Error status code
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.From">
            <summary>
            Stack trace
            </summary>
        </member>
        <member name="T:Kitias.Providers.Helpers">
            <summary>
            Helpers to work with transmiters
            </summary>
        </member>
        <member name="M:Kitias.Providers.Helpers.GetEnumMemberAttrValue``1(``0)">
            <summary>
            Get sting from enum member
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="payload">Enum type member</param>
            <returns>To string type</returns>
        </member>
        <member name="M:Kitias.Providers.Helpers.GetEnumMemberFromString``1(System.String)">
            <summary>
            Get enum member from string
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="payload">From which string</param>
            <returns>Enum type member</returns>
        </member>
        <member name="M:Kitias.Providers.Helpers.GetFileSizeFromNumber(System.Int64)">
            <summary>
            Get text file size
            </summary>
            <param name="size">Numeric size</param>
            <returns>Normal size</returns>
        </member>
        <member name="T:Kitias.Providers.Implementations.AttendanceProvider">
            <summary>
            Provider to work with attendances
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.AttendanceProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Constructor to get services
            </summary>
            <param name="mapper">Mapping</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Class to work with different dbs</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.AuthProvider">
            <summary>
            Main authorization provider
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.AuthProvider.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Implementations.AuthProvider},Microsoft.AspNetCore.Identity.UserManager{Kitias.Persistence.Entities.Identity.User},Kitias.Persistence.Contexts.IdentityDataContext,Kitias.Providers.Services.EmailSender,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Identity.RoleManager{Kitias.Persistence.Entities.Identity.Role})">
            <summary>
            Constructor for take neccasary services
            </summary>
            <param name="logger">Logging</param>
            <param name="userManager">Manager for create and check user</param>
            <param name="dataContext">Manager for CRUD identity dbs</param>
            <param name="emailSender">Service to send emails</param>
            <param name="config">Config to get nessary values</param>
            <param name="roleManager">Manager to work with roles</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.GroupProvider">
            <summary>
            Provider to work with group entity
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.GroupProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Implementations.GroupProvider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Configure all necessary services
            </summary>
            <param name="mapper">Mapper</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Working with different dbs</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.StudentProvider">
            <summary>
            Provider to work woth Student
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.StudentProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Constructor to get services
            </summary>
            <param name="mapper">Mapping</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Class to work with different dbs</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.SubjectProvider">
            <summary>
            Provider to work with subject db
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.SubjectProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Constructor to get services
            </summary>
            <param name="mapper">Mapping</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Pattern to get required db</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.TeacherProvider">
            <summary>
            Provider to work with teacher db
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.TeacherProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Constructor to get services
            </summary>
            <param name="mapper">Mapping</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Pattern to get work with different dbs</param>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IAttendanceProvider">
            <summary>
            Interfsce to work with attendances
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeTeacherShedulersAsync(System.String)">
            <summary>
            Take shedulers of the teacher
            </summary>
            <param name="email">Teacher email</param>
            <returns>List shedulers info</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeTeacherShedulerAsync(System.Guid)">
            <summary>
            Take sheduler of the teacher
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>List shedulers info</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeShedulerStudentsGroupAsync(System.Guid)">
            <summary>
            Take sheduler students and gorup id of the teacher
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>Students and group id</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeTeacherShedulerSubjectsAsync(System.Guid)">
            <summary>
            Take shedulersubjects of the teacher
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>List shedulers subjects info</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeShedulerAttendancesAsync(System.Guid)">
            <summary>
            Take attendances of the sheduler
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>List attandances</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.TakeShedulerStudentAttendancesAsync(System.Guid)">
            <summary>
            Take student attendances of the sheduler
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>List student attandances</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.CreateShedulerAsync(Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel)">
            <summary>
            Create sheduler for teacher
            </summary>
            <param name="model">Model to create scheduler</param>
            <returns>Created sheduler</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.UpdateShedulerAsync(System.Guid,Kitias.Providers.Models.Attendances.ShedulerRequestModel)">
            <summary>
            Update sheduler for teacher
            </summary>
            <param name="id">Identifier of sheduler</param>
            <param name="model">Model to update scheduler</param>
            <returns>Updated sheduler</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.DeleteShedulerAsync(System.Guid)">
            <summary>
            Delete sheduler for teacher
            </summary>
            <param name="id">Identifier of sheduler</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.CreateStudentAttendanceAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel})">
            <summary>
            Create student attendance
            </summary>
            <param name="id">Identifier of sheduler</param>
            <param name="models">Models to create student attendances</param>
            <returns>List of created student attendances</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.UpdateStudentAttendanceAsync(System.Guid,Kitias.Providers.Models.Attendances.UpdateStudentAttendanceModel)">
            <summary>
            Update student attendance
            </summary>
            <param name="id">Identifier of student attendance</param>
            <param name="model">Model to update student attendance</param>
            <returns>Updated student attendance</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.DeleteStudentAttendanceAsync(System.Guid)">
            <summary>
            Delete student attendance for teacher
            </summary>
            <param name="id">Identifier of student attendance</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.CreateAttendancesAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.AttendanceRequestModel})">
            <summary>
            Create attendances
            </summary>
            <param name="id">Identifier of sheduler</param>
            <param name="models">Models to create attendances</param>
            <returns>List of created attendances</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.UpdateAttendancesAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.AttendanceRequestModel})">
            <summary>
            Update attendances
            </summary>
            <param name="id">Identifier of sheduler</param>
            <param name="models">Models to create attendances</param>
            <returns>List of updated attendances</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.UpdateAttendanceAsync(System.Guid,Kitias.Providers.Models.Attendances.UpdateAttendanceModel)">
            <summary>
            Update attendance
            </summary>
            <param name="id">Identifier of attendance</param>
            <param name="model">Model to update attendance</param>
            <returns>Updated attendance</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAttendanceProvider.DeleteAttendanceAsync(System.Guid)">
            <summary>
            Delete attendance for teacher
            </summary>
            <param name="id">Identifier of attendance</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IAuthProvider">
            <summary>
            USer authorization methods
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.SignUpAsync(Kitias.Providers.Models.Request.SignUpRequestModel)">
            <summary>
            Register new user
            </summary>
            <param name="model">Register model</param>
            <returns>Statuse message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.TokenSaveAsync(Kitias.Providers.Models.Request.TokenRequestModel)">
            <summary>
            Save refresh token to db
            </summary>
            <param name="model">Token save model</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.TokenUpdateAsync(Kitias.Providers.Models.Request.UpdateTokenRequestModel)">
            <summary>
            Update refresh token
            </summary>
            <param name="model">Model to update token</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.LogoutAsync(System.String)">
            <summary>
            Delete refresh token from db
            </summary>
            <param name="refreshToken">Token to delete UserToken</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.SendVerifyEmailAsync(System.String)">
            <summary>
            Send verify email method
            </summary>
            <param name="email">User email</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.ConfirmVerifyEmailAsync(System.String,System.String)">
            <summary>
            Confirm verify email method
            </summary>
            <param name="token">Email confirmation token</param>
            <param name="email">User email</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.RegisterNewRolesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Register new roles to db
            </summary>
            <param name="roles">New roles</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.AddRolesToUserAsync(Kitias.Providers.Models.Request.RolesToUserRequestModel)">
            <summary>
            Add new roles to user
            </summary>
            <param name="model">Model to create new UserRole</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IGroupProvider">
            <summary>
            Provider to work with group
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroups">
            <summary>
            Take all groups from db
            </summary>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupsNames">
            <summary>
            Take all groups names from db
            </summary>
            <returns>Groups names</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupStudentsAsync(System.Guid)">
            <summary>
            Take all students of the group from db
            </summary>
            <param name="id">Id of the group to take</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupStudentsNamesAsync(System.Guid)">
            <summary>
            Take all students of the group from db
            </summary>
            <param name="id">Id of the group to take</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupSubjectsAsync(System.Guid)">
            <summary>
            Take all subjects of the group from db
            </summary>
            <param name="id">Id of the group to take</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupByIdAsync(System.Guid)">
            <summary>
            Take only one group from db
            </summary>
            <param name="id">Id of the group to take</param>
            <returns>Group</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.CreateGroupAsync(Kitias.Providers.Models.Group.CreateGroupModel)">
            <summary>
            Create group
            </summary>
            <param name="group">Model to create a group</param>
            <returns>New group</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.CreateGroupStudentsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Create group students
            </summary>
            <param name="id">Id of the group to take</param>
            <param name="students">New students to the group</param>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.CreateGroupSubjectsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Create group subjects
            </summary>
            <param name="id">Id of the group to take</param>
            <param name="subjects">New subjects to the group</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.UpdateGroupAsync(System.Guid,Kitias.Providers.Models.Group.UpdateGroupModel)">
            <summary>
            Update group by id
            </summary>
            <param name="id">Id of the group</param>
            <param name="group">Group update model</param>
            <returns></returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.DeleteGroupAsync(System.Guid)">
            <summary>
            Delete group from db
            </summary>
            <param name="id">Id of the group</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.DeleteGroupSubjectsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Delete ubjects from the group
            </summary>
            <param name="id">Id of the group</param>
            <param name="subjects">Subjects to delete from the group</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IStudentProvider">
            <summary>
            Provider to work with students
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IStudentProvider.TakeStudents">
            <summary>
            Take all students from db
            </summary>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IStudentProvider.TakeStudentByIdAsync(System.Guid)">
            <summary>
            Take only one student from db
            </summary>
            <param name="id">Id of the student to take</param>
            <returns>Student</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IStudentProvider.CreateStudentAsync(Kitias.Providers.Models.Person.CreateStudentModel)">
            <summary>
            Create student
            </summary>
            <param name="student">Model to create a student</param>
            <returns>New student</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.ISubjectProvider">
            <summary>
            Provider to work with subject db
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.TakeSubjects">
            <summary>
            Take all subjects from db
            </summary>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.TakeSubjectByIdAsync(System.Guid)">
            <summary>
            Take only one subject from db
            </summary>
            <param name="id">Id of the subject to take</param>
            <returns>Subject</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.TakeSubjectGroupsAsync(System.Guid)">
            <summary>
            Take all groups of the subject
            </summary>
            <param name="id">Id of the subject to take</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.CreateSubjectAsync(System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Subject.CreateSubjectModel},System.String)">
            <summary>
            Create subject
            </summary>
            <param name="subject">Model to create a subject</param>
            <param name="email">Teacher email</param>
            <returns>New subject</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.CreateSubjectGroupsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Create subject groups
            </summary>
            <param name="id">Id of the subject to take</param>
            <param name="groups">New groups to the subject</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.UpdateSubjectAsync(System.Guid,Kitias.Providers.Models.Subject.UpdateSubjectModel)">
            <summary>
            Update subject by id
            </summary>
            <param name="id">Id of the subject</param>
            <param name="Subject">Subject update model</param>
            <returns>Subject</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.UpdateSubjectsByNameAsync(System.String,System.String)">
            <summary>
            Update subjects by name
            </summary>
            <param name="name">Name of the subjects</param>
            <param name="newName">New name for the subjects</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.DeleteSubjectsByNameAsync(System.String)">
            <summary>
            Delete subjects by name
            </summary>
            <param name="name">Name of the subjects</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.DeleteSubjectAsync(System.Guid)">
            <summary>
            Delete subject from db
            </summary>
            <param name="id">Id of the subject</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ISubjectProvider.DeleteSubjectGroupsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Delete groups from the subject
            </summary>
            <param name="id">Id of the subject</param>
            <param name="groups">Groups to delete from the subject</param>
            <returns>Groups message</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.ITeacherProvider">
            <summary>
            Provider to work with teacher db
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeachers">
            <summary>
            Take all teacher from db
            </summary>
            <returns>Teacher</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeacherByIdAsync(System.Guid)">
            <summary>
            Take only one te teacher db
            </summary>
            <param name="id">Id of the teacher to take</param>
            <returns>Teacher</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeacherSubjectsAsync(System.String)">
            <summary>
            Take all subjects of the teacher
            </summary>
            <param name="email">Email of the teacher to take</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeacherSubjectsNamesAsync(System.String)">
            <summary>
            Take all subjects names of the teacher
            </summary>
            <param name="email">Email of the teacher to take</param>
            <returns>Subjects names</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeacherSubjectAsync(System.String,System.String)">
            <summary>
            Take subject of the teacher by name
            </summary>
            <param name="email">Email of the teacher to take</param>
            <param name="name">Subject name</param>
            <returns>Subject</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.TakeTeacherSubjectsInfosAsync(System.String)">
            <summary>
            Take all subjects infos of the teacher
            </summary>
            <param name="email">Email of the teacher to take</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.ITeacherProvider.CreateTeacherAsync(Kitias.Providers.Models.Person.CreateTeacherModel)">
            <summary>
            Create teacher
            </summary>
            <param name="teacher">Model to create a teacher</param>
            <returns>New teacher</returns>
        </member>
        <member name="T:Kitias.Providers.MappingProfile">
            <summary>
            Service ti map entites
            </summary>
        </member>
        <member name="M:Kitias.Providers.MappingProfile.#ctor">
            <summary>
            Configure all entites
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.AttendanceRequestModel">
            <summary>
            Model to create attendance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.AttendanceRequestModel.Attended">
            <summary>
            Flag student is attended
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.AttendanceRequestModel.Score">
            <summary>
            Score
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.AttendanceRequestModel.StudentId">
            <summary>
            Student came from db
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.AttendanceRequestModel.StudentName">
            <summary>
            Students name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.AttendanceRequestModel.SubjectId">
            <summary>
            Subject identifier
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.ShedulerRequestModel">
            <summary>
            Nodel to create sheduler
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerRequestModel.GroupNumber">
            <summary>
            Group id
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerRequestModel.Name">
            <summary>
            Sheduler name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerRequestModel.SubjectName">
            <summary>
            Subject name
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel">
            <summary>
            Model to create sheduler with Email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel.TeacherEmail">
            <summary>
            Teacher email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel.GroupNumber">
            <summary>
            Group number
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel.Name">
            <summary>
            Sheduler name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerProviderRequestModel.SubjectName">
            <summary>
            Subject name
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.ShedulersListResult">
            <summary>
            All shedulers of the teacher
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulersListResult.Id">
            <summary>
            Sheduler Identifier
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulersListResult.Name">
            <summary>
            Sheduler name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulersListResult.GroupNumber">
            <summary>
            Number of the group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulersListResult.SubjectName">
            <summary>
            Subject name
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.ShedulerStudentsGroup">
            <summary>
            Model to take sheduler students and group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerStudentsGroup.GroupId">
            <summary>
            Sheduler group id
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.ShedulerStudentsGroup.Students">
            <summary>
            Sheduler students
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel">
            <summary>
            Model to create student attendance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel.Raiting">
            <summary>
            Student raiting
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel.Grade">
            <summary>
            Student grade
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel.StudentId">
            <summary>
            Student came from db
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel.StudentName">
            <summary>
            Students name
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.UpdateAttendanceModel">
            <summary>
            Model to update student attendance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.UpdateAttendanceModel.Attended">
            <summary>
            Flag student is attended
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.UpdateAttendanceModel.Score">
            <summary>
            Score
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Attendances.UpdateStudentAttendanceModel">
            <summary>
            Model to update student attendance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.UpdateStudentAttendanceModel.Raiting">
            <summary>
            Student raiting
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Attendances.UpdateStudentAttendanceModel.Grade">
            <summary>
            Student grade
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.EmailRequestModel">
            <summary>
            Model to send emails
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.To">
            <summary>
            Email recipient's address
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.Subject">
            <summary>
            Email subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.Message">
            <summary>
            Email body message
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.File.CreateFileModel">
            <summary>
            Model to create file
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.Name">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.Date">
            <summary>
            File added date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.OwnerEmail">
            <summary>
            Email of the sender
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.Path">
            <summary>
            Path to local file storing
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.File.CreateFileModel.Size">
            <summary>
            File size
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Group.CreateGroupModel">
            <summary>
            Group model to create new instance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Course">
            <summary>
            Group course
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Number">
            <summary>
            Group number
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.EducationType">
            <summary>
            Group education type
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Speciality">
            <summary>
            Group speciality
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.ReceiptDate">
            <summary>
            Group receipt date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.IssueDate">
            <summary>
            Grou issue date
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Group.GroupNames">
            <summary>
            Group names transfer object
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.GroupNames.Id">
            <summary>
            Group identifier
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.GroupNames.Number">
            <summary>
            Group number
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Group.UpdateGroupModel">
            <summary>
            Model to update the exsisted group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.UpdateGroupModel.Course">
            <summary>
            New course of the group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.UpdateGroupModel.Number">
            <summary>
            New group number
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Person.CreateStudentModel">
            <summary>
            Model to create a student
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateStudentModel.Name">
            <summary>
            Person name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateStudentModel.Surname">
            <summary>
            Person surname
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateStudentModel.Patronymic">
            <summary>
            Person patronymic
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateStudentModel.Email">
            <summary>
            Person email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateStudentModel.GroupNumber">
            <summary>
            Student group number
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Person.CreateTeacherModel">
            <summary>
            Model to create a teacher
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateTeacherModel.Name">
            <summary>
            Person name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateTeacherModel.Surname">
            <summary>
            Person surname
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateTeacherModel.Patronymic">
            <summary>
            Person patronymic
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Person.CreateTeacherModel.Email">
            <summary>
            Person email
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.RolesToUserRequestModel">
            <summary>
            Add roles to user
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.RolesToUserRequestModel.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.RolesToUserRequestModel.Roles">
            <summary>
            New roles
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.SignInRequestModel">
            <summary>
            Sign in model
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignInRequestModel.UserName">
            <summary>
            User username
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignInRequestModel.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.SignUpRequestModel">
            <summary>
            Model for registration user
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.Email">
            <summary>
            New user email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.UserName">
            <summary>
            New user username
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.Password">
            <summary>
            New user password
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.Roles">
            <summary>
            User roles
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.TokenRequestModel">
            <summary>
            Save token model
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.TokenRequestModel.Token">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.TokenRequestModel.UserName">
            <summary>
            User e-mail
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.UpdateTokenRequestModel">
            <summary>
            Model to update old token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.UpdateTokenRequestModel.OldToken">
            <summary>
            Old token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.UpdateTokenRequestModel.NewToken">
            <summary>
            New token
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Result`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Kitias.Providers.Models.Result`1.Value">
            <summary>
            Succes result value
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Result`1.IsSuccess">
            <summary>
            True if success result
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Result`1.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.ResultHandler">
            <summary>
            Handler to return result
            </summary>
        </member>
        <member name="M:Kitias.Providers.Models.ResultHandler.OnSuccess``1(``0)">
            <summary>
            Return success type
            </summary>
            <typeparam name="T">Return class</typeparam>
            <param name="value">Result value</param>
            <returns>Result</returns>
        </member>
        <member name="M:Kitias.Providers.Models.ResultHandler.OnFailure``1(System.String)">
            <summary>
            Failure result
            </summary>
            <typeparam name="T">Working class</typeparam>
            <param name="error">Error message</param>
            <returns>Result</returns>
        </member>
        <member name="T:Kitias.Providers.Models.Subject.CreateSubjectModel">
            <summary>
            Model to create subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Name">
            <summary>
            Subject name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Type">
            <summary>
            Subject type
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Time">
            <summary>
            Subject time
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Date">
            <summary>
            Subject date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Week">
            <summary>
            Subject week
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Day">
            <summary>
            Subject day
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.CreateSubjectModel.Theme">
            <summary>
            Subject theme
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Subject.DeleteSubjectByNameModel">
            <summary>
            Model to delete subjects by name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.DeleteSubjectByNameModel.Name">
            <summary>
            Names of subjects
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Subject.SubjectInfoModel">
            <summary>
            Subjects info model
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.SubjectInfoModel.Name">
            <summary>
            Name of the subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.SubjectInfoModel.Type">
            <summary>
            Type of the subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.SubjectInfoModel.Date">
            <summary>
            List of dates
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.SubjectInfoModel.Time">
            <summary>
            List of times
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Subject.UpdateSubjectByName">
            <summary>
            Update subjects with name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectByName.Name">
            <summary>
            Name for subjects
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectByName.NewName">
            <summary>
            New name for subjects
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Subject.UpdateSubjectModel">
            <summary>
            Model to update subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Name">
            <summary>
            Subject name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Type">
            <summary>
            Subject type
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Time">
            <summary>
            Subject time
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Date">
            <summary>
            Subject date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Week">
            <summary>
            Subject week
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Day">
            <summary>
            Subject day
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Subject.UpdateSubjectModel.Theme">
            <summary>
            Subject theme
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.SignUpRegisterModel">
            <summary>
            Model for registration user and student
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.PersonType">
            <summary>
            New user variant
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Email">
            <summary>
            New user email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.UserName">
            <summary>
            New user username
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Password">
            <summary>
            New user password
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Name">
            <summary>
            Person name
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Surname">
            <summary>
            Person surname
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Patronymic">
            <summary>
            Person patronymic
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.GroupNumber">
            <summary>
            Student group number
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.SignUpRegisterModel.Roles">
            <summary>
            User roles
            </summary>
        </member>
        <member name="T:Kitias.Providers.Provider">
            <summary>
            Base provider
            </summary>
        </member>
        <member name="M:Kitias.Providers.Provider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Map neccassary services
            </summary>
            <param name="mapper">Mapper service</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Take info about entities</param>
        </member>
        <member name="M:Kitias.Providers.Provider.ReturnFailureResult``1(System.String,System.String)">
            <summary>
            Return failure resul with logging
            </summary>
            <typeparam name="T">Type of return value</typeparam>
            <param name="loggerMessage">Message for logging</param>
            <param name="errorMessage">Message for client</param>
            <returns>Failure result</returns>
        </member>
        <member name="T:Kitias.Providers.Services.EmailSender">
            <summary>
            Service to send email confirmation to user
            </summary>
        </member>
        <member name="M:Kitias.Providers.Services.EmailSender.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor to take nessasary services
            </summary>
            <param name="config">Config</param>
        </member>
        <member name="M:Kitias.Providers.Services.EmailSender.SendEmailAsync(Kitias.Providers.Models.EmailRequestModel)">
            <summary>
            Send email method
            </summary>
            <param name="model">Email sender settings</param>
            <returns>Asynchorys</returns>
        </member>
    </members>
</doc>
