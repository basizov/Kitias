<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kitias.Providers</name>
    </assembly>
    <members>
        <member name="T:Kitias.Providers.ExceptionModel">
            <summary>
            Model to view for user
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.StatusCode">
            <summary>
            Error status code
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="P:Kitias.Providers.ExceptionModel.From">
            <summary>
            Stack trace
            </summary>
        </member>
        <member name="T:Kitias.Providers.Implementations.AuthProvider">
            <summary>
            Main authorization provider
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.AuthProvider.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Implementations.AuthProvider},Microsoft.AspNetCore.Identity.UserManager{Kitias.Persistence.Entities.Identity.User},Kitias.Persistence.IdentityDataContext,Kitias.Providers.Services.EmailSender,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor for take neccasary services
            </summary>
            <param name="logger">Logging</param>
            <param name="userManager">Manager for create and check user</param>
            <param name="dataContext">Manager for CRUD identity dbs</param>
            <param name="emailSender">Service to send emails</param>
            <param name="config">Config to get nessary values</param>
        </member>
        <member name="T:Kitias.Providers.Implementations.GroupProvider">
            <summary>
            Provider to work with group entity
            </summary>
        </member>
        <member name="M:Kitias.Providers.Implementations.GroupProvider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Implementations.GroupProvider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Configure all necessary services
            </summary>
            <param name="mapper">Mapper</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Working with different dbs</param>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IAuthProvider">
            <summary>
            USer authorization methods
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.SignUpAsync(Kitias.Providers.Models.Request.SignUpRequestModel)">
            <summary>
            Register new user
            </summary>
            <param name="model">Register model</param>
            <returns>Statuse message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.TokenSaveAsync(Kitias.Providers.Models.Request.TokenRequestModel)">
            <summary>
            Save refresh token to db
            </summary>
            <param name="model">Token save model</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.TokenUpdateAsync(Kitias.Providers.Models.Request.UpdateTokenRequestModel)">
            <summary>
            Update refresh token
            </summary>
            <param name="model">Model to update token</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.LogoutAsync(System.String)">
            <summary>
            Delete refresh token from db
            </summary>
            <param name="refreshToken">Token to delete UserToken</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.SendVerifyEmailAsync(System.String)">
            <summary>
            Send verify email method
            </summary>
            <param name="email">User email</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IAuthProvider.ConfirmVerifyEmailAsync(System.String,System.String)">
            <summary>
            Confirm verify email method
            </summary>
            <param name="token">Email confirmation token</param>
            <param name="email">User email</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Providers.Interfaces.IGroupProvider">
            <summary>
            Provider to work with group
            </summary>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroups">
            <summary>
            Take all groups from db
            </summary>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.TakeGroupByIdAsync(System.Guid)">
            <summary>
            Take only one group from db
            </summary>
            <param name="id">Id of the group to take</param>
            <returns>Group</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.CreateGroupAsync(Kitias.Providers.Models.Group.CreateGroupModel)">
            <summary>
            Create group
            </summary>
            <param name="group">Model to create a group</param>
            <returns>New group</returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.UpdateGroupAsync(System.Guid,Kitias.Providers.Models.Group.UpdateGroupModel)">
            <summary>
            Update group by id
            </summary>
            <param name="id">Id of the group</param>
            <param name="group">Group update model</param>
            <returns></returns>
        </member>
        <member name="M:Kitias.Providers.Interfaces.IGroupProvider.DeleteGroupAsync(System.Guid)">
            <summary>
            Delete group from db
            </summary>
            <param name="id">Id of the group</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Providers.MappingProfile">
            <summary>
            Service ti map entites
            </summary>
        </member>
        <member name="M:Kitias.Providers.MappingProfile.#ctor">
            <summary>
            Configure all entites
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.EmailRequestModel">
            <summary>
            Model to send emails
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.To">
            <summary>
            Email recipient's address
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.Subject">
            <summary>
            Email subject
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.EmailRequestModel.Message">
            <summary>
            Email body message
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Group.CreateGroupModel">
            <summary>
            Group model to create new instance
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Course">
            <summary>
            Group course
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Number">
            <summary>
            Group number
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.EducationType">
            <summary>
            Group education type
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.Speciality">
            <summary>
            Group speciality
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.ReceiptDate">
            <summary>
            Group receipt date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.IssueDate">
            <summary>
            Grou issue date
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.CreateGroupModel.StudentsIds">
            <summary>
            Group students
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Group.UpdateGroupModel">
            <summary>
            Model to update the exsisted group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.UpdateGroupModel.Course">
            <summary>
            New course of the group
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.UpdateGroupModel.Number">
            <summary>
            New group number
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Group.UpdateGroupModel.StudentsIds">
            <summary>
            New students of the group
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.SignUpRequestModel">
            <summary>
            Model for registration user
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.Email">
            <summary>
            New user email
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.UserName">
            <summary>
            New user username
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.SignUpRequestModel.Password">
            <summary>
            New user password
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.TokenRequestModel">
            <summary>
            Save token model
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.TokenRequestModel.Token">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.TokenRequestModel.UserName">
            <summary>
            User e-mail
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Request.UpdateTokenRequestModel">
            <summary>
            Model to update old token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.UpdateTokenRequestModel.OldToken">
            <summary>
            Old token
            </summary>
        </member>
        <member name="P:Kitias.Providers.Models.Request.UpdateTokenRequestModel.NewToken">
            <summary>
            New token
            </summary>
        </member>
        <member name="T:Kitias.Providers.Models.Result`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Kitias.Providers.Provider">
            <summary>
            Base provider
            </summary>
        </member>
        <member name="M:Kitias.Providers.Provider.#ctor(AutoMapper.IMapper,Microsoft.Extensions.Logging.ILogger{Kitias.Providers.Provider},Kitias.Repository.Interfaces.Base.IUnitOfWork)">
            <summary>
            Map neccassary services
            </summary>
            <param name="mapper">Mapper service</param>
            <param name="logger">Logging</param>
            <param name="unitOfWork">Take info about entities</param>
        </member>
        <member name="T:Kitias.Providers.Services.EmailSender">
            <summary>
            Service to send email confirmation to user
            </summary>
        </member>
        <member name="M:Kitias.Providers.Services.EmailSender.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor to take nessasary services
            </summary>
            <param name="config">Config</param>
        </member>
        <member name="M:Kitias.Providers.Services.EmailSender.SendEmailAsync(Kitias.Providers.Models.EmailRequestModel)">
            <summary>
            Send email method
            </summary>
            <param name="model">Email sender settings</param>
            <returns>Asynchorys</returns>
        </member>
    </members>
</doc>
