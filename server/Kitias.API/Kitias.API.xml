<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kitias.API</name>
    </assembly>
    <members>
        <member name="T:Kitias.API.Controllers.AttendanceSchedulerController">
            <summary>
            Controller to work with attendances
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.AttendanceSchedulerController},Kitias.Providers.Interfaces.IAttendanceProvider)">
            <summary>
            Constructor to get servies
            </summary>
            <param name="logger">Logging</param>
            <param name="attendanceProvider">Provider to work with data contexta nd attendances</param>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulersAsync">
            <summary>
            Take all shedulers of the teacher
            </summary>
            <returns>Shedulers</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeAttendanceGrades">
            <summary>
            Take all attendances grades
            </summary>
            <returns>Shedulers</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulerAsync(System.Guid)">
            <summary>
            Take sheduler by id
            </summary>
            <param name="id">Sheduler identifier</param>
            <returns>Sheduler</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulerStudentsGroupAsync(System.Guid)">
            <summary>
            Take sheduler students and group id by id
            </summary>
            <param name="id">Sheduler identifier</param>
            <returns>Sheduler students and group id</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulerSubjectsAsync(System.Guid)">
            <summary>
            Take shedulre subjects by id
            </summary>
            <param name="id">Sheduler identifier</param>
            <returns>Sheduler subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.CreateShedulerAsync(Kitias.Providers.Models.Attendances.ShedulerRequestModel)">
            <summary>
            Create sheduler for the teacher
            </summary>
            <param name="model">Model to create new sheduler</param>
            <returns>New sheduler</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.UpdateShedulerAsync(System.Guid,Kitias.Providers.Models.Attendances.ShedulerRequestModel)">
            <summary>
            Update sheduler by id
            </summary>
            <param name="id">Id of sheduler</param>
            <param name="model">Model to update sheduler</param>
            <returns>Updated sheduler</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.DeleteShedulerAsync(System.Guid)">
            <summary>
            Delete sheduler by id
            </summary>
            <param name="id">Id of sheduler</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulerAttendancesByIdAsync(System.Guid)">
            <summary>
            Take all attendances of the sheduler
            </summary>
            <param name="id">Id of sheduler</param>
            <returns>Attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.TakeShedulerByIdAsync(System.Guid)">
            <summary>
            Take all student attendances of the sheduler
            </summary>
            <param name="id">Id of sheduler</param>
            <returns>Student attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.CreateStudentAttendancesAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel})">
            <summary>
            Create student attendances of the sheduler
            </summary>
            <param name="id">Id of sheduler</param>
            <param name="models">Model to craete student attendace</param>
            <returns>Student attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.UpdateStudentAttendanceAsync(System.Guid,Kitias.Providers.Models.Attendances.UpdateStudentAttendanceModel)">
            <summary>
            Update student attendance grade/raiting
            </summary>
            <param name="id">Id of student attendace</param>
            <param name="model">Model to updart student attendace</param>
            <returns>Update student attendance</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.UpdateStudentAttendanceAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.StudentAttendanceRequestModel})">
            <summary>
            Update student attendance like create
            </summary>
            <param name="id">Id of the sheduler</param>
            <param name="models">Models to update student attendace</param>
            <returns>Updated student attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.DeleteStudentAttendanceAsync(System.Guid)">
            <summary>
            Delete student attendance
            </summary>
            <param name="id">Id of student attendace</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.CreateAttendancesAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.AttendanceRequestModel})">
            <summary>
            Create attendances of the sheduler
            </summary>
            <param name="id">Id of sheduler</param>
            <param name="models">Model to craete attendace</param>
            <returns>Attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.UpdateAttendancesAsync(System.Guid,System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Attendances.AttendanceRequestModel})">
            <summary>
            Update all attendances of the sheduler
            </summary>
            <param name="id">Id of sheduler</param>
            <param name="models">Model to craete attendace</param>
            <returns>Updated attendances</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.UpdateAttendanceAsync(System.Guid,Kitias.Providers.Models.Attendances.UpdateAttendanceModel)">
            <summary>
            Update attendance
            </summary>
            <param name="id">Id of attendace</param>
            <param name="model">Model to update attendace</param>
            <returns>Update attendance</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.DeleteAttendanceAsync(System.Guid)">
            <summary>
            Delete attendance
            </summary>
            <param name="id">Id of attendace</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AttendanceSchedulerController.ExportFileAsync(System.String)">
            <summary>
            Export to excel
            </summary>
            <param name="name">Name of subject</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.API.Controllers.AuthController">
            <summary>
            Authorization endpoint
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Kitias.API.Controllers.AuthController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.AuthController},System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Options.IOptions{Kitias.Persistence.Entities.Default.ISSecure},Microsoft.Extensions.Configuration.IConfiguration,Kitias.Providers.Interfaces.IStudentProvider,Kitias.Providers.Interfaces.ITeacherProvider)" -->
        <member name="M:Kitias.API.Controllers.AuthController.IsAuthAsync">
            <summary>
            Flag tha user is auth
            </summary>
            <returns>Roles</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AuthController.SignUpAsync(Kitias.Providers.Models.SignUpRegisterModel)">
            <summary>
            Sign up endpoint for new user
            </summary>
            <param name="model">Model with user and student data</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AuthController.SignInAsync(Kitias.Providers.Models.Request.SignInRequestModel)">
            <summary>
            Sign in endpoint for user
            </summary>
            <param name="model">Model with user data</param>
            <returns>Roles</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AuthController.TakeNewTokenAsync">
            <summary>
            Update old refresh token
            </summary>
            <returns>New access token</returns>
        </member>
        <member name="M:Kitias.API.Controllers.AuthController.LogoutAsync">
            <summary>
            Logout user from system
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.API.Controllers.BaseController">
            <summary>
            Base controller
            </summary>
        </member>
        <member name="F:Kitias.API.Controllers.BaseController._logger">
            <summary>
            Logging
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.BaseController.#ctor(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Add basic services
            </summary>
            <param name="logger">logging service</param>
        </member>
        <member name="T:Kitias.API.Controllers.GroupController">
            <summary>
            Controller to work with groups
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.GroupController},Kitias.Providers.Interfaces.IGroupProvider)">
            <summary>
            Add services to the app
            </summary>
            <param name="logger">Logging</param>
            <param name="groupProvider">Provider to work with groups</param>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroups">
            <summary>
            Take all groups from db
            </summary>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupsWithStudentsAsync">
            <summary>
            Take all groups with students from db
            </summary>
            <returns>Groups with students</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupsNames">
            <summary>
            Take all groups names from db
            </summary>
            <returns>Groups names</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupByIdAsync(System.Guid)">
            <summary>
            Take group from db by id
            </summary>
            <param name="id">Id of group</param>
            <returns>Group</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupStudentsByIdAsync(System.Guid)">
            <summary>
            Take group students from db by id
            </summary>
            <param name="id">Id of group</param>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupStudentsNamesByIdAsync(System.Guid)">
            <summary>
            Take group students from db by id
            </summary>
            <param name="id">Id of group</param>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.AddGroupStudentsByIdAsync(System.Guid,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add group students to db by id
            </summary>
            <param name="id">Id of group</param>
            <param name="students">New students</param>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.TakeGroupSubjectsByIdAsync(System.Guid)">
            <summary>
            Take group subjects from db by id
            </summary>
            <param name="id">Id of group</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.AddGroupSubjectsByIdAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Add group subjects to db by id
            </summary>
            <param name="id">Id of group</param>
            <param name="subjects">New subjects</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.CreateGroupAsync(Kitias.Providers.Models.Group.CreateGroupModel)">
            <summary>
            Create new group
            </summary>
            <param name="model">Model to create group</param>
            <returns>New group</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.UpdateGroupAsync(System.Guid,Kitias.Providers.Models.Group.UpdateGroupModel)">
            <summary>
            Update group by id
            </summary>
            <param name="id">Existed group id</param>
            <param name="model">Model to create group</param>
            <returns>Updated group</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.DeleteGroupAsync(System.Guid)">
            <summary>
            Delete group by id
            </summary>
            <param name="id">Existed group id</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.GroupController.DeleteGroupSubjectsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Delete subjects from the group by id
            </summary>
            <param name="id">Existed group id</param>
            <param name="subjects">Deleted subjects</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.API.Controllers.StudentController">
            <summary>
            Controller to work with persons
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.StudentController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.StudentController},Kitias.Providers.Interfaces.IStudentProvider)">
            <summary>
            Add neccessary services
            </summary>
            <param name="logger">Logging</param>
            <param name="studentProvider">Student provider to work student db</param>
        </member>
        <member name="M:Kitias.API.Controllers.StudentController.TakeStudents">
            <summary>
            Take all students from db
            </summary>
            <returns>Students</returns>
        </member>
        <member name="M:Kitias.API.Controllers.StudentController.TakeStudentByIdAsync(System.Guid)">
            <summary>
            Take student from db by id
            </summary>
            <param name="id">Id of student</param>
            <returns>Student</returns>
        </member>
        <member name="T:Kitias.API.Controllers.SubjectController">
            <summary>
            Controller to work with subjecct db
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.SubjectController},Kitias.Providers.Interfaces.ISubjectProvider)">
            <summary>
            Add services to the app
            </summary>
            <param name="logger">Logging</param>
            <param name="subjectProvider">Provider to work with subjects</param>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.TakeSubject">
            <summary>
            Take all subject from db
            </summary>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.TakeSubjectByIdAsync(System.Guid)">
            <summary>
            Take subject from db by id
            </summary>
            <param name="id">Id of subject</param>
            <returns>Subject</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.TakeSubjectShedulerAsync(System.String)">
            <summary>
            Take sheduler of the subject from db by id
            </summary>
            <param name="name">Name of subject</param>
            <returns>Sheduler</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.TakeGroupSubjectsByIdAsync(System.Guid)">
            <summary>
            Take subject groups from db by id
            </summary>
            <param name="id">Id of subject</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.CreateSubjectAsync(System.Collections.Generic.IEnumerable{Kitias.Providers.Models.Subject.CreateSubjectModel})">
            <summary>
            Create new subject
            </summary>
            <param name="model">Model to create subject</param>
            <returns>New subject</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.AddGroupSubjectsByIdAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Add subject groups to db by id
            </summary>
            <param name="id">Id of subject</param>
            <param name="groups">New groups</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.UpdateSubjectAsync(System.Guid,Kitias.Providers.Models.Subject.UpdateSubjectModel)">
            <summary>
            Update subject by id
            </summary>
            <param name="id">Existed subject id</param>
            <param name="model">Model to create subject</param>
            <returns>Updated subject</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.UpdateSubjectsByName(Kitias.Providers.Models.Subject.UpdateSubjectByName)">
            <summary>
            Update subjects by name
            </summary>
            <param name="model">Model with names for subjects</param>
            <returns>Groups</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.DeleteSubjectsByName(System.String)">
            <summary>
            Update subjects by name
            </summary>
            <param name="name">Name for subjects</param>
            <returns>STatus message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.DeleteDeleteAsync(System.Guid)">
            <summary>
            Delete subject by id
            </summary>
            <param name="id">Existed subject id</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.API.Controllers.SubjectController.DeleteGroupSubjectsAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Delete groups from the subject by id
            </summary>
            <param name="id">Existed subject id</param>
            <param name="groups">Deleted groups</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.API.Controllers.TeacherController">
            <summary>
            Controller to work with persons
            </summary>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Controllers.TeacherController},Kitias.Providers.Interfaces.ITeacherProvider)">
            <summary>
            Add neccessary services
            </summary>
            <param name="logger">Logging</param>
            <param name="teacherProvider">Teacher provider to work teacher db</param>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeStudents">
            <summary>
            Take all teachers from db
            </summary>
            <returns>Teachers</returns>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeStudentByIdAsync(System.Guid)">
            <summary>
            Take teacher from db by id
            </summary>
            <param name="id">Id of teacher</param>
            <returns>Teacher</returns>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeTeacherSubjectsAsync">
            <summary>
            Take subjects of the teacher
            </summary>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeTeacherSubjectsNamesAsync">
            <summary>
            Take subjects names of the teacher
            </summary>
            <returns>Subjects names</returns>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeTeacherSubjectAsync(System.String)">
            <summary>
            Take subject of the teacher
            </summary>
            <param name="name">subject name</param>
            <returns>Subjects</returns>
        </member>
        <member name="M:Kitias.API.Controllers.TeacherController.TakeTeacherSubjectsInfosAsync">
            <summary>
            Take subjects infos of the teacher
            </summary>
            <returns>Subjects infos</returns>
        </member>
        <member name="T:Kitias.API.Extensions.AuthorizationExtension">
            <summary>
            Extension to authenticate token
            </summary>
        </member>
        <member name="M:Kitias.API.Extensions.AuthorizationExtension.AddOwnAuthorization(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add authrization service
            </summary>
            <param name="services">List services</param>
            <param name="config">Config to get necessary values</param>
            <returns>Services with new one</returns>
        </member>
        <member name="T:Kitias.API.Extensions.AutoMapperExtension">
            <summary>
            Extension to add automapper service
            </summary>
        </member>
        <member name="M:Kitias.API.Extensions.AutoMapperExtension.AddMappingProfile(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add automapper service
            </summary>
            <param name="services">List services</param>
            <returns>List services with new service</returns>
        </member>
        <member name="T:Kitias.API.Extensions.DbConnectionExtension">
            <summary>
            Extension to add database connection service
            </summary>
        </member>
        <member name="M:Kitias.API.Extensions.DbConnectionExtension.AddDbConnection(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Add data base connection service
            </summary>
            <param name="services">List services</param>
            <param name="config">App config</param>
            <returns>List services with new service</returns>
        </member>
        <member name="T:Kitias.API.Extensions.OpenAPIExtension">
            <summary>
            Extension to plug providers
            </summary>
        </member>
        <member name="M:Kitias.API.Extensions.OpenAPIExtension.AddOpenAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add open api service
            </summary>
            <param name="services">List services</param>
            <returns>List services with new service</returns>
        </member>
        <member name="T:Kitias.API.Extensions.ProvidersExtension">
            <summary>
            Extension to plug providers
            </summary>
        </member>
        <member name="M:Kitias.API.Extensions.ProvidersExtension.AddProviders(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add providers
            </summary>
            <param name="services">List services</param>
            <returns>List services with new service</returns>
        </member>
        <member name="T:Kitias.API.Middlewares.AuthenticationMiddleware">
            <summary>
            Middleware to set access_token to header
            </summary>
        </member>
        <member name="M:Kitias.API.Middlewares.AuthenticationMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{Kitias.API.Middlewares.AuthenticationMiddleware})">
            <summary>
            Take neccasary services
            </summary>
            <param name="next">Next action</param>
            <param name="logger">Logginh</param>
        </member>
        <member name="M:Kitias.API.Middlewares.AuthenticationMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Use middleware
            </summary>
            <param name="context">Http context</param>
            <returns>Next pipeline</returns>
        </member>
        <member name="T:Kitias.API.Middlewares.ErrorHandlerMiddleware">
            <summary>
            Middleware for catch errors
            </summary>
        </member>
        <member name="M:Kitias.API.Middlewares.ErrorHandlerMiddleware.#ctor(Microsoft.Extensions.Logging.ILogger{Kitias.API.Middlewares.ErrorHandlerMiddleware},Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Take neccasary services
            </summary>
            <param name="logger">Logging</param>
            <param name="next">Next action</param>
        </member>
        <member name="M:Kitias.API.Middlewares.ErrorHandlerMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Use middleware
            </summary>
            <param name="context">Http context</param>
            <returns>Next piplene</returns>
        </member>
        <member name="T:Kitias.API.Program">
            <summary>
            Start point of app
            </summary>
        </member>
        <member name="M:Kitias.API.Program.Main(System.String[])">
            <summary>
            Startup function
            </summary>
            <param name="args">Neccessary args of enviroment</param>
            <returns>Asynchronys</returns>
        </member>
        <member name="M:Kitias.API.Program.CreateHostBuilder(System.String[])">
            <summary>
            Create programm initializer
            </summary>
            <param name="args">Neccessary args of enviroment</param>
            <returns>Programm initializer</returns>
        </member>
        <member name="T:Kitias.API.Services.FileService">
            <summary>
            Service to work with files
            </summary>
        </member>
        <member name="M:Kitias.API.Services.FileService.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor to get services from di
            </summary>
            <param name="hostEnviroment">Enviroment to get assembly info</param>
        </member>
        <member name="M:Kitias.API.Services.FileService.SaveFilesAsync(System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Http.IFormFile},System.String)">
            <summary>
            Save files in project
            </summary>
            <param name="files">Files to save</param>
            <param name="userEmail">Email to create user directoryinfo</param>
            <returns>File Names</returns>
        </member>
        <member name="T:Kitias.API.Startup">
            <summary>
            Startup class for run the app
            </summary>
        </member>
        <member name="M:Kitias.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor for additing neccesary fields
            </summary>
            <param name="config">Get the app config file</param>
        </member>
        <member name="M:Kitias.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure all neccessary services
            </summary>
            <param name="services">Initial services</param>
        </member>
        <member name="M:Kitias.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure all neccessary middlewares
            </summary>
            <param name="app">Generate app piplines</param>
        </member>
    </members>
</doc>
