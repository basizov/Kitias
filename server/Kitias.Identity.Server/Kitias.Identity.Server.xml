<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kitias.Identity.Server</name>
    </assembly>
    <members>
        <member name="T:Kitias.Identity.Server.Config.OAuthOIDCConfig">
            <summary>
            Config for OAuth 2.0 and Open Id
            </summary>
        </member>
        <member name="F:Kitias.Identity.Server.Config.OAuthOIDCConfig.TakeAPIResources">
            <summary>
            Initial api resources
            </summary>
        </member>
        <member name="F:Kitias.Identity.Server.Config.OAuthOIDCConfig.TakeScopes">
            <summary>
            Initial api scopes
            </summary>
        </member>
        <member name="F:Kitias.Identity.Server.Config.OAuthOIDCConfig.TakeClients">
            <summary>
            Initial api clients
            </summary>
        </member>
        <member name="T:Kitias.Identity.Server.Controllers.AuthController">
            <summary>
            Controller to make authorization with db
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.#ctor(Kitias.Providers.Interfaces.IAuthProvider)">
            <summary>
            Constructor for authorization controller
            </summary>
            <param name="authProvider">Provider for working user with db</param>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.SignUpAsync(Kitias.Providers.Models.Request.SignUpRequestModel)">
            <summary>
            Sign up method to register user
            </summary>
            <param name="model">Sign up model</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.RegisterNewRolesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Register new roles method
            </summary>
            <param name="roles">New roles</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.AddRolesToUserAsync(Kitias.Providers.Models.Request.RolesToUserRequestModel)">
            <summary>
            Add new roles to user method
            </summary>
            <param name="model">Model with roles and user email</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.SaveTokenAsync(Kitias.Providers.Models.Request.TokenRequestModel)">
            <summary>
            Save refresh token method
            </summary>
            <param name="model">Model to save token for user</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.UpdateTokenAsync(Kitias.Providers.Models.Request.UpdateTokenRequestModel)">
            <summary>
            Update refresh token controller
            </summary>
            <param name="model">Model to update token</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.TakeToken">
            <summary>
            Take refresh token from cookies
            </summary>
            <returns>Refresh token</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.Logout">
            <summary>
            Logout from accout
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.ConfirmVerifyEmailAsync(System.String,System.String)">
            <summary>
            Verify email from token
            </summary>
            <param name="token">Token to verify email</param>
            <param name="email">Receiver email</param>
            <returns>Status message</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Controllers.AuthController.ResendVerifyEmailAsync(System.String)">
            <summary>
            Resendv verify token email
            </summary>
            <param name="email">Receiver email</param>
            <returns>Status message</returns>
        </member>
        <member name="T:Kitias.Identity.Server.Extensions.IdentityDbContextExtension">
            <summary>
            Extension for identity db connection
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Extensions.IdentityDbContextExtension.AddIdentityDb(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method which add identity db context service
            </summary>
            <param name="services">All services</param>
            <param name="config">App config</param>
            <returns>List config with new service</returns>
        </member>
        <member name="T:Kitias.Identity.Server.Extensions.IdentityServerExtension">
            <summary>
            Extension for adding identity server
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Extensions.IdentityServerExtension.AddOwnIdentityServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method which add identity server service
            </summary>
            <param name="services">All services</param>
            <returns>List config with new service</returns>
        </member>
        <member name="T:Kitias.Identity.Server.Extensions.OpenApiExtension">
            <summary>
            Extension dor adding open api service
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Extensions.OpenApiExtension.AddOpenAPI(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method which add OpenApi service
            </summary>
            <param name="services">All services</param>
            <returns>List config with new service</returns>
        </member>
        <member name="T:Kitias.Identity.Server.Program">
            <summary>
            Start point of app
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Program.Main(System.String[])">
            <summary>
            Startup function
            </summary>
            <param name="args">Neccessary args of enviroment</param>
            <returns>Asynchronys</returns>
        </member>
        <member name="M:Kitias.Identity.Server.Program.CreateHostBuilder(System.String[])">
            <summary>
            Create programm initializer
            </summary>
            <param name="args">Neccessary args of enviroment</param>
            <returns>Programm initializer</returns>
        </member>
        <member name="T:Kitias.Identity.Server.Startup">
            <summary>
            Startup class for run the app
            </summary>
        </member>
        <member name="M:Kitias.Identity.Server.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor for additing neccesary fields
            </summary>
            <param name="config">Get the app config file</param>
        </member>
        <member name="M:Kitias.Identity.Server.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure all neccessary services
            </summary>
            <param name="services">Initial services</param>
        </member>
        <member name="M:Kitias.Identity.Server.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure all neccessary middlewares
            </summary>
            <param name="app">Generate app piplines</param>
        </member>
    </members>
</doc>
